Vec2 :: struct {
  x: int;
  y: int;
}

BarFlags :: enum {
  Bar_Foo,
  Bar_Bizz,
  Bar_Buzz,
  Bar_C,
}

vec2_add :: proc(a: Vec2, b: Vec2) -> vec2 {
  // result: Vec2 = a;
  result := a;
  a.x += b.x;
  a.y += b.y;
  return result;
}

foo :: proc(num: int) -> int {
  bar := num + num * 2;
  if bar < 0 {
    bar = 0;
  }
  return bar;
}

main :: proc(argc: int, argv: *char) -> int {
  arr: [10]int;
  arr1: **[10]int;
  x: int;
  x = 0;
  return x;
}




==
Tokens:
==

int := 0
           | [1-9][0-9]*
           | 0[xX][0-9a-eA-E]+
           | 9[bB][0-1]+
           | 0[0-7]+

float := [0-9]+ \. [0-9]* "f"?
             | [0-9]* \. [0-9]+ "f"?

ident := [a-zA-Z_][a-zA-Z_0-9]*

str   := \"[^\r\n] \"

==
Grammar
==

lvalue := ident
        | ([])* lvalue
        | "*"* expr

stmtblock := "{" stmt* "}"

stmt  := decl
       | expr ";"
       | ident "=" expr ";"
       | ifstmt
       | "while" expr stmtblock
       | "for" var_decl ";" expr ";" expr stmtblock


ifstmt := "if" expr stmtblock ("else if" expr stmtblock)* "else" stmtblock

==
Declarations:
==

decl  := var_decl
       | proc_decl
       | struct_decl
       | enum_decl

base_type := int
           | float
           | char
           | ident

type  := ("*")* ("[" expr? "]")* base_type
typelist := type ("," type)*

param := (ident ":" type)
paramlist := param ("," param)*

enum_field := ident ("=" int)? ","
aggregate_field := ident ":" type ";"

var_decl    := ident ":"  type ";"
proc_decl   := ident "::" "proc"   "(" paramlist? ")" "->" typelist stmtblock
struct_decl := ident "::" "struct" "{" aggregate_field* "}"
enum_decl   := ident "::" "enum"   "{" enum_field* "}"