
vec2 :: struct {
  x: int;
  y: int;
}

vec2_add :: proc(a: vec2, b: vec2) -> vec2 {
  // result: vec2 = a;
  result := a;
  a.x += b.x;
  a.y += b.y;
  return result;
}

foo :: proc(num: int) -> int {
  bar := num + num * 2;
  if bar < 0 {
    bar = 0;
  }
  return bar;
}

main :: proc(argc: int, argv: *char) -> int {
  x: int;
  x = 0;
  return x;
}

TOKEN_INT := 0
           | [1-9][0-9]*
           | 0[xX][0-9a-eA-E]+
           | 9[bB][0-1]+
           | 0[0-7]+

TOKEN_FLOAT := [0-9]+ \. [0-9]* 'f'?
             | [0-9]* \. [0-9]+ 'f'?

TOKEN_IDENT := [a-zA-Z_][a-zA-Z_0-9]*

TOKEN_STR   := \"[^\r\n] \"


Statements:
==

STMT  := VAR_DECL
       | "if" EXPR stmtblock


Declarations:
==

DECL  := VAR_DECL
       | PROC_DECL
       | STRUCT_DECL
       | ENUM_DECL

param := (IDENT ":" TYPE)
paramlist := param ("," param)*

typelist :=

VAR_DECL := IDENT ":" TYPE ";"
PROC_DECL := IDENT "::" "proc" "(" paramlist ")" "->" typelist stmtblock
STRUCT_DECL := IDENT "::" "struct" structblock