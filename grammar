vec2 :: struct {
  x: int;
  y: int;
}

vec2_add :: proc(a: vec2, b: vec2) -> vec2 {
  // result: vec2 = a;
  result := a;
  a.x += b.x;
  a.y += b.y;
  return result;
}

foo :: proc(num: int) -> int {
  bar := num + num * 2;
  if bar < 0 {
    bar = 0;
  }
  return bar;
}

main :: proc(argc: int, argv: *char) -> int {
  arr: [10]int;
  arr1: **[10]int;
  x: int;
  x = 0;
  return x;
}

INT := 0
           | [1-9][0-9]*
           | 0[xX][0-9a-eA-E]+
           | 9[bB][0-1]+
           | 0[0-7]+

FLOAT := [0-9]+ \. [0-9]* 'f'?
             | [0-9]* \. [0-9]+ 'f'?

IDENT := [a-zA-Z_][a-zA-Z_0-9]*

STR   := \"[^\r\n] \"

==
Statements:
==

STMT  := EXPR
       | DECL
       | IDENT "=" EXPR
       | "if" EXPR stmtblock

stmtblock := "{" STMT* "}"

==
Declarations:
==

DECL  := VAR_DECL
       | PROC_DECL
       | STRUCT_DECL
       | ENUM_DECL

base_type := int
           | float
           | char
           | IDENT

type  := ("*")* ("[" EXPR? "]")* base_type
typelist := type ("," type)*

param := (IDENT ":" TYPE)
paramlist := param ("," param)*

enum_field := IDENT ("=" INT)? ","
aggregate_field := IDENT ":" TYPE ";"

VAR_DECL := IDENT ":" type ";"
PROC_DECL := IDENT "::" "proc" "(" paramlist? ")" "->" typelist stmtblock
STRUCT_DECL := IDENT "::" "struct" "{" aggregate_field* "}"
ENUM_DECL := IDENT "::" "enum" "{" enum_field* "}"